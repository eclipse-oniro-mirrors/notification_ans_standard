# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/notification/ans_standard/notification.gni")
import("//build/test.gni")

module_output_path = "ans_standard/systemtest"

ohos_systemtest("ActsNotificationFuzzTest") {
  module_out_path = module_output_path
  resource_config_file =
      "${ans_standard_path}/test/resource/notificationfuzztest/ohos_test.xml"

  sources = [
    "${ans_standard_path}/test/resource/notificationfuzztest/src/notificationfuzztestmanager.cpp",
    "${ans_standard_path}/test/resource/notificationfuzztest/src/notificationgetparam.cpp",
    "actsnotificationfuzztest.cpp",
  ]

  configs = [ "${ans_standard_path}/test/common/acts:ansfwk_kits_test_config" ]

  include_dirs = [
    "//utils/native/base/include",
    "//base/notification/ans_standard/frameworks/ans/core/include",
    "//base/notification/ans_standard/interfaces/innerkits/ans/native/include",
    "//base/notification/ans_standard/services/ans/include",
    "//third_party/json/single_include",
    "//foundation/appexecfwk/standard/kits/appkit/native/app/include",
    "//foundation/appexecfwk/adapter/interfaces/innerkits/appexecfwk_base/include",
    "//foundation/aafwk/standard/interfaces/innerkits/ability_manager/include",
    "//foundation/aafwk/standard/frameworks/kits/ability/native/include",
    "//foundation/aafwk/standard/services/abilitymgr/include",
    "//foundation/multimodalinput/input/interfaces/native/innerkits/event/include",
    "//foundation/aafwk/standard/frameworks/kits/app/native/app/include/task",
    "//foundation/aafwk/standard/common/task_dispatcher/include/threading",
    "//foundation/aafwk/standard/common/task_dispatcher/include/dispatcher",
    "//foundation/aafwk/standard/common/task_dispatcher/include/task",
  ]

  cflags = []

  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "//base/global/resmgr_standard/frameworks/resmgr:global_resmgr",
    "//base/notification/ans_standard/frameworks/ans/core:ans_core",
    "//base/notification/ans_standard/frameworks/ans/native:ans_innerkits",
    "//base/notification/ans_standard/frameworks/wantagent:native_wantagent",
    "//base/notification/ans_standard/services/ans:ans_targets",
    "//base/notification/ces_standard/frameworks/common:libevent_common",
    "//base/notification/ces_standard/frameworks/native:cesfwk_innerkits",
    "//foundation/aafwk/standard/common/task_dispatcher:appkit_dispatcher_td",
    "//foundation/aafwk/standard/frameworks/kits/appkit:appkit_native",
    "//foundation/aafwk/standard/services/abilitymgr:abilityms",
    "//foundation/multimodalinput/input/frameworks/proxy:libmmi-client",
    "//third_party/googletest:gtest_main",
    "//utils/native/base:utils",
  ]

  defines = [
    "APP_LOG_TAG = \"AnsFwkKitsTest\"",
    "LOG_DOMAIN = 0xD002200",
  ]
  external_deps = [
    "ability_runtime:ability_manager",
    "ability_runtime:abilitykit_native",
    "ability_runtime:app_manager",
    "ability_runtime:base",
    "ability_runtime:want",
    "appexecfwk_standard:libeventhandler",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "dmsfwk_standard:zuri",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "multimedia_image_standard:image_native",
    "native_appdatamgr:native_appdatafwk",
    "native_appdatamgr:native_dataability",
    "native_appdatamgr:native_rdb",
    "samgr_standard:samgr_proxy",
  ]
}

group("actsnotificationfuzztest") {
  testonly = true

  deps = [ ":ActsNotificationFuzzTest" ]
}
